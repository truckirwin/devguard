#!/usr/bin/env python3
"""
Agentic Motivation AI Setup Script

This script helps set up the complete agentic AI system including:
- Claude Sonnet (Anthropic)
- ElevenLabs (Audio generation)
- Leonardo AI (Image generation)
"""

import os
import sys
import subprocess
from pathlib import Path

def print_banner():
    """Print the setup banner"""
    print("=" * 60)
    print("🤖 AGENTIC MOTIVATION AI SETUP")
    print("=" * 60)
    print("Setting up your complete AI-powered motivation system!")
    print("This includes:")
    print("  🧠 Claude Sonnet - Message generation")
    print("  🎵 ElevenLabs - Audio synthesis")
    print("  🎨 Leonardo AI - Image generation")
    print("=" * 60)
    print()

def check_python_version():
    """Check if Python version is compatible"""
    if sys.version_info < (3, 8):
        print("❌ Error: Python 3.8 or higher is required")
        print(f"   Current version: {sys.version}")
        sys.exit(1)
    else:
        print(f"✅ Python version: {sys.version.split()[0]}")

def install_dependencies():
    """Install required Python packages"""
    print("\n📦 Installing dependencies...")
    
    requirements = [
        "Flask==2.3.3",
        "Flask-CORS==4.0.0", 
        "aiohttp==3.9.1",
        "requests==2.31.0",
        "python-dotenv==1.0.0"
    ]
    
    for package in requirements:
        try:
            print(f"   Installing {package}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", package], 
                                stdout=subprocess.DEVNULL)
            print(f"   ✅ {package}")
        except subprocess.CalledProcessError:
            print(f"   ❌ Failed to install {package}")
            return False
    
    print("✅ All dependencies installed successfully!")
    return True

def setup_api_keys():
    """Guide user through API key setup"""
    print("\n🔑 API Key Configuration")
    print("=" * 40)
    
    # Check existing .env file
    env_file = Path(".env")
    env_vars = {}
    
    if env_file.exists():
        print("📄 Found existing .env file")
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value
    
    # API key setup
    apis = {
        'ANTHROPIC_API_KEY': {
            'name': 'Claude Sonnet (Anthropic)',
            'url': 'https://console.anthropic.com/',
            'description': 'For generating personalized motivational messages'
        },
        'ELEVENLABS_API_KEY': {
            'name': 'ElevenLabs',
            'url': 'https://elevenlabs.io/',
            'description': 'For converting text to high-quality speech'
        },
        'LEONARDO_API_KEY': {
            'name': 'Leonardo AI',
            'url': 'https://leonardo.ai/',
            'description': 'For generating motivational images'
        }
    }
    
    for key, info in apis.items():
        current_value = env_vars.get(key, '')
        masked_value = f"{'*' * (len(current_value) - 8)}{current_value[-8:]}" if len(current_value) > 8 else current_value
        
        print(f"\n🔧 {info['name']}")
        print(f"   Purpose: {info['description']}")
        print(f"   Get API key: {info['url']}")
        
        if current_value:
            print(f"   Current: {masked_value}")
            update = input("   Update this key? (y/N): ").lower().strip()
            if update != 'y':
                continue
        
        new_value = input(f"   Enter {info['name']} API key: ").strip()
        if new_value:
            env_vars[key] = new_value
            print(f"   ✅ {info['name']} key configured")
        else:
            print(f"   ⚠️  Skipping {info['name']} (demo mode only)")
    
    # Write .env file
    with open('.env', 'w') as f:
        f.write("# Agentic Motivation AI Configuration\n")
        f.write("# Generated by setup script\n\n")
        
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
        
        f.write("\n# Server Configuration\n")
        f.write("PORT=8080\n")
    
    print("\n✅ API configuration saved to .env file")

def create_output_directory():
    """Create output directory for generated content"""
    output_dir = Path("generated_content")
    output_dir.mkdir(exist_ok=True)
    print(f"✅ Output directory created: {output_dir}")

def test_configuration():
    """Test the configuration"""
    print("\n🧪 Testing configuration...")
    
    try:
        # Test imports
        print("   Testing imports...")
        from agentic_ai_service import AgenticAIService
        print("   ✅ Agentic AI service imported")
        
        # Test service initialization
        print("   Testing service initialization...")
        service = AgenticAIService()
        print("   ✅ Service initialized")
        
        # Check API keys
        keys_configured = {
            'Anthropic': bool(service.anthropic_api_key),
            'ElevenLabs': bool(service.elevenlabs_api_key),
            'Leonardo': bool(service.leonardo_api_key)
        }
        
        print("   API Key Status:")
        for service_name, configured in keys_configured.items():
            status = "✅" if configured else "⚠️"
            print(f"     {status} {service_name}")
        
        if all(keys_configured.values()):
            print("   🎉 Full agentic mode available!")
        else:
            print("   📝 Demo mode available (configure missing keys for full features)")
        
        return True
        
    except ImportError as e:
        print(f"   ❌ Import error: {e}")
        return False
    except Exception as e:
        print(f"   ❌ Configuration error: {e}")
        return False

def create_start_script():
    """Create a convenient start script"""
    start_script = """#!/bin/bash
# Agentic Motivation AI Startup Script

echo "🚀 Starting Agentic Motivation AI..."

# Load environment variables
if [ -f .env ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

# Check if server is already running
if lsof -i:8080 >/dev/null 2>&1; then
    echo "⚠️  Port 8080 is already in use"
    echo "   Stopping existing server..."
    pkill -f "app_agentic.py"
    sleep 2
fi

# Start the server
echo "🤖 Launching Agentic AI server on port 8080..."
python3 app_agentic.py
"""
    
    with open('start_agentic_ai.sh', 'w') as f:
        f.write(start_script)
    
    # Make executable
    os.chmod('start_agentic_ai.sh', 0o755)
    print("✅ Start script created: ./start_agentic_ai.sh")

def print_success_message():
    """Print final success message with instructions"""
    print("\n" + "=" * 60)
    print("🎉 AGENTIC MOTIVATION AI SETUP COMPLETE!")
    print("=" * 60)
    print()
    print("🚀 Quick Start:")
    print("   1. Run: ./start_agentic_ai.sh")
    print("   2. Open: http://localhost:8080")
    print("   3. Create amazing motivational content!")
    print()
    print("📁 Files created:")
    print("   • .env - API configuration")
    print("   • generated_content/ - Output directory")
    print("   • start_agentic_ai.sh - Startup script")
    print()
    print("🔧 To reconfigure API keys:")
    print("   python3 setup_agentic_ai.py")
    print()
    print("📚 Documentation:")
    print("   • Full agentic mode: All APIs configured")
    print("   • Demo mode: Local generation only")
    print("   • Each generation creates:")
    print("     - Claude Sonnet message")
    print("     - ElevenLabs audio + captions")
    print("     - Leonardo AI image")
    print("     - Downloadable ZIP package")
    print()
    print("=" * 60)

def main():
    """Main setup function"""
    print_banner()
    
    try:
        # Step 1: Check Python version
        check_python_version()
        
        # Step 2: Install dependencies
        if not install_dependencies():
            print("❌ Setup failed during dependency installation")
            sys.exit(1)
        
        # Step 3: Setup API keys
        setup_api_keys()
        
        # Step 4: Create directories
        create_output_directory()
        
        # Step 5: Test configuration
        if not test_configuration():
            print("⚠️  Configuration test failed, but you can still run in demo mode")
        
        # Step 6: Create convenience scripts
        create_start_script()
        
        # Step 7: Success message
        print_success_message()
        
    except KeyboardInterrupt:
        print("\n\n⚠️  Setup interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Setup failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 